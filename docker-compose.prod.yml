# Production docker-compose with external dependencies
version: '3.8'

services:
  backend:
    image: ${REGISTRY_URL}/convoflow-backend:${IMAGE_TAG:-latest}
    environment:
      NODE_ENV: production
      PORT: 3001
      JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      CORS_ORIGIN: ${CORS_ORIGIN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "3001:3001"
    deploy:
      replicas: ${BACKEND_REPLICAS:-2}
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "node", "server/healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - convoflow-network

  frontend:
    image: ${REGISTRY_URL}/convoflow-frontend:${IMAGE_TAG:-latest}
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL}
      REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL}
    ports:
      - "80:80"
    deploy:
      replicas: ${FRONTEND_REPLICAS:-2}
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - convoflow-network

networks:
  convoflow-network:
    external: true
